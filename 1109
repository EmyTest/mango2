mock表示这个api返回的数据是假的  仅作测试用
server表示需要启动这个服务

契约测试：
工具的约定

-------------------------------------------------------------------------------------------------------------
enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。


>>>seasons = ['Spring', 'Summer', 'Fall', 'Winter']
>>> list(enumerate(seasons))
[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
>>> list(enumerate(seasons, start=1))       # 下标从 1 开始
[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]



QPS    ,CPU 了解
中级：自动化
高级：工具开发

----------------------------------------------
输入框：测试思路【思考框架】
----------------------------------------------
功能性； 常规可输入的内容，如 字符串，数字 ，特殊字符，转义字符
        非常规的，html标签，css ， JavaScript代码，url，tag（div等标签；定义高度宽度 ，id ，classname。。。
        输入内容的边界；空字符，超长文本，边界值+1，边界值-1
        
兼容性；  用户分布，产品品牌，分辨率，topN的机型

稳定性；  在某一压力下，搜索，结果可以正常返回
          多次查询，返回的内容相对稳定
          
性能；  QPS  Query Per Second,每秒能处理的请求数
        从点击开始到页面完全加载，平均耗时时间
        加载的页面大小，资源，（JS  ,CSS文件）的数量
        
安全；  SQL注入，JS注入  

接口；  查询接口正确性
        接口对一些异常情况的容错处理
        查询接口在非浏览器环境的处理情况

线上监控；保证线上服务质量，建立实施监控
          监控，及时发现异常情况，降低对用户的影响

自动化；Selenium  UI自动化
        例行回归验证，提高效率
        Ios ----  WDA
        Android --- uiautomator --- appium
        
 ====================================================================================
 表现得能力：
 技术能力；
 管理能力；
 学习能力；
 团队协助能力；
 --------------------------
 文案简洁，格式清晰
 
 工作内容：描述  【数量质量】
 学习能力：“保证项目质量和进度”
 
 
------------------------------------------------------------------------


移动端工具： monkey ，monkeyrunner ， ADB
移动端自动化框架： robotium ， appium ， uiautomator，selenium
平台： windows ，linux ， Android ， ios
服务端：loadrunner，jmeter
数据库：mysql可视化工具 ，navicat
-------------------------------------------------------------------------


工作效率？？成果？？
如何安排任务，如何提高测试效率
工作中的成果
如何团队间协调工作

--------------------------------------------------------------------------
问题得背后：【体现】
看人品，
看能力，
看态度
--------------------------------------------------------------------------

=====================================================================================
测试基本阶段： 单元测试
              集成测试
              系统测试
              验收测试
              
需求沟通 --- 制定测试方案 --- 设计测试用例 --- 准备测试环境 -- 测试执行 --- bug处理 -- 回归验收 --- 线上跟进 -- 




等价类   
边界值 
错误推测法   
正交表






测试理论；如何分层自动化测试：  UI自动化回归
                             接口自动化
                             单元测试-白盒测试
                             
                             
         如何降低自动化维护成本：UI自动化，针对不常见的页面
                               接口自动化，周期短，变动频繁
                               框架分层，用例与框架分离
         
               
         
         如何保证脚本有效性 ：保证定位有效性（封装），封装处理异常
                             保证流程有消息，封装独立方法
                             保证数据有效性，数据备份与恢复
                             
         常见的测试覆盖类型：语句覆盖
                            判定覆盖
                            条件覆盖
                            条件组合覆盖
                            路径覆盖
                            
                            
         B/S   和C/S区别
         
         
         安全性测试 包含：用户访问认证
                         传输数据加密
                         安全防护策略：安全日志，入侵检测，隔离防护，漏洞扫描
                         数据库备份与恢复
                         防病毒系统
                         SQL注入,JS注入
                         
         
         
         
         
         测试报告包含哪些内容：
                            测试背景说明
                            测试范围说明
                            测试环境说明
                            测试方法说明
                            测试结果结论
                            质量或风险评估
                            
                            
                            
                            
           Bug类型：
           bug：代码编写错误导致
           defect：缺陷，实现和需求不一致
           fault：由于环境系统问题引起的
         
         【4-2】
         

【【python常见的问题】】
说一下面向对象的概念：
                   面向对象编程，简称OOP,是一种程序设计思路
                   主要包括：类，继承，多态 ，实例，属性，方法
                   
                   
                   





什么是进程，线程，协程：
                      进程：独立数据空间，进程间不共享数据，系统调度
                      线程：执行程序的最小单元，进程内线程间共享资源，系统调度
                      协程：程序员调度，分解一个线程成为多个“微线程”
                      

#encoding:utf-8
#进程
# from multiprocessing import Process
#
# def foo(i):
#     print("this is Process",i)
# for i in range(5):
#     p = Process(target=foo,args=(i,))
#     p.start()


#线程
# import threading
#
# def show(i):
#     print('this is thread',i)
#
# for i in range(5):
#     t = threading.Thread(target=show,args=(i,))
#     t.start()



#协程
import gevent

def foo():
    print('start_foo')
    gevent.sleep(2)
    print("end_foo")
def bar():
    print("start_bar")
    gevent.sleep(0)
    print("end_foo")
# foo()
# bar()
gevent.joinall([
    gevent.spawn(foo),
    gevent.spawn(bar),
])


如何使用python实现socket编程：
                      socket又称套接字，应用程序通过套接字向网络发出请求
                      应用程序通过套接字应答网络请求
                      使主机间或一台计算机上的进程间可以通讯
                      
                      



什么是lambda函数：
                返回一系列连续增加的整数
                工作方式类似于 分片
                可以生成一个列表对象
                




tuple和list函数的区别：
                元组，不可修改
                列表，可修改




range函数的用法：
                注：python2 和python3里面的range函数不一样



字符串的拆分方法:
                string对象的split方法，不允许有多个分隔符
                函数re.split()，允许为分隔符指定多个正则模式
                
                
line = 'i am super man!'
print(line.split(" "))
import re
print(re.split("[m]",line))             

------------------------------------------


['i', 'am', 'super', 'man!']
['i a', ' super ', 'an!']
---------------------------------------------------------------------------------------





单引号，双引号，三引号的区别：
                        单引号，双引号，没有区别；三引号可以换行
                        
                        

*args和**kwargs什么作用：
                *args：可变的参数列表
                **kwargs：键值对参数列表



#arg
# def test_args(first,*args):
#     print(first)
#     for v in args:
#         print('args %s'%v)
# args = (2,3,4,5)
# print('--------')
# test_args(1,2,3,4,5)

#kwargs
def test_kwargs(first,*args,**kwargs):
    print(first)
    for v in args:
        print("args %s" %v)
    for k ,v in kwargs.items():
        print("kwargs",(k,v))
# args = (2,3,4,5)
# kwargs:k1=5,k2=6,k0=4
test_kwargs(1,2,3,4,5,k0=4,k1=5,k2=6)






python中pass语句的作用：
                       占位符，实现一个空函数
                       
                       
                       
                

re模块match和search方法的不同：
                        search，扫描整个字符串查找匹配
                        match，只在字符串的开始位置匹配
                    


import re

s1 = 'helloworld,helloworld'
w1 = 'hello'
w2 = 'world'
#search扫描整个字符串
print('1',re.search(w2,s1))
print('2',re.search(w2,s1).group())

#match只在字符串开始位置匹配
print('3',re.match(w2,s1))
print('4',re.match(w2,s1).group())


--------------------------------------------------------------------


1 <_sre.SRE_Match object; span=(5, 10), match='world'>
2 world
3 None
Traceback (most recent call last):
  File "D:/untitled/pyt crs/a12.py", line 32, in <module>
    print('4',re.match(w2,s1).group())
AttributeError: 'NoneType' object has no attribute 'group'

---------------------------------------------------------------------
                        
                        

解释一下WSGI和FastCGI的关系：
                CGI：公共网关接口（CommonGateway Interface）
                     HTTP服务器与机器上的程序进行交互的一种工具
                     程序须运行在网络服务器上，和语言无关
                
                WSGI：Python Web Server Gateway Interface
                      python应用程序和WEB服务器之间的一种接口
                      
                FastCGI: 像是一个常驻（long-live）型的CGI，它可以一直执行着
                
                
                
              

python是如何操作文件的：
                       打开文件
                       写入或读取数据
                       关闭文件
                       

模式	可做操作	  若文件不存在	是否覆盖
r	 只能读	     报错	              -
r+	 可读可写	    报错	             是
w	 只能写	     创建	              是
w+　	可读可写	   创建               是
a　　	只能写	   创建	            否，追加写
a+	可读可写	    创建	             否，追加写                       



#写文件
f = open('test.txt','wt')
f.write("hello world")
f.close()
#使用with，追加内容，不用关系文件关闭问题
with open('test.txt','at') as f:
    f.write("\nhello mook")
#读取文件
with open("test.txt",'rt') as f:
    print(f.read())
    
    
    
    

python的内存管理机制：
                        引用计数
                        垃圾回收
                        内存池
                        
                        
from  sys import getrefcount

a1 = 10000000
a2 = 10000000
del a1
del a2
print(id(a1))
print(id(a2))

#检验a和b是同一个东西
print(a1 is a2)

#获取a2的引用计数
print(getrefcount(a1))   






                        

dict的items和iteritems区别：
                items方法以列表方式返回，返回时没有特殊顺序
                iteritems 方法类似，但返回的是一个迭代器对象

【注】：在Python2.x中，

iteritems() 用于返回本身字典列表操作后的迭代



Python 3.x 里面，

iteritems() 方法已经废除了，而 items() 得到的结果是和 2.x 里面 viewitems() 一致的。在3.x 里 用 items()替换iteritems() ，可以用于 for 来循环遍历。
--------------------- 
作者：kukudehui 
来源：CSDN 
原文：https://blog.csdn.net/kukudehui/article/details/79896924 
版权声明：本文为博主原创文章，转载请附上博文链接！



五：基于python常问算法有哪些？？

排序：
       从小到大   sorted(list)
       从大到小   sorted(list,reverse=True)


冒泡 :
        比较相邻的元素，如果第一个比第二个大，就交换
        一轮遍历，每两个相邻元素，重复1，最大放队尾
        不包括已经排队尾的，重复2
        
-----------------------------------------------
#冒泡排序
def bubble_sort(lists):
    #获取数组的长度
    count = len(lists) -1
    #N个元素便利N次
    for index in range(count,0,-1):   #负数递减
        #第i个和第i+1个依次对比
        for sub_index in range(index):
            #大的元素冒上去
            if lists[sub_index] > lists[sub_index+1]:
                lists[sub_index],lists[sub_index+1] = lists[sub_index+1],lists[sub_index]
    return lists
alist = [0,10,88,19,9,1]
print(bubble_sort(alist))

-----------------------------------------------------





快排原理及代码实现：
        从列表中挑出一个元素，作为基准值key
        所有小于key的元素放左边，所有大于key的元素放在右边
        分别递归左侧列表，右侧列表  
        
        
 ---------------------------------------------------------------------------------------------------       
#【快速排序】【5-3】

def quick_sort(lists,left,right):
    if left > right:
        return lists
    #定义游标
    low = left
    high = right

    #取参考标志，最左边的元素
    key = lists[low]
    while low < high:
        #从最右侧向左，依次和标志元素对比，如果右侧的元素大于标志元素
        while low <high and lists[high] >= key:
            #右侧减1
            high -= 1
        #否则low赋high值
        lists[low] = lists[high]
        #从最左侧向右，依次和标志元素对比，如果左侧的元素小于标志元素
        while low < high and lists[low] <= key:
            #左侧+1
            low += 1
        #否则high赋low值
        lists[high] = lists[low]
    #最后给high位置赋值
    lists[high] = key
    #处理左侧元素
    quick_sort(lists,left,low -1)
    #处理右侧元素
    quick_sort(lists,low+1,right)
    return lists
alist = [0,10,88,19,9,1,7]
print(quick_sort(alist,0,6))

--------------------------------------------------------------------------------------------------------------
【5-4】
堆排序： 
        堆排序是指利用堆的数据结构设计的一种排序算法
        堆近似一个完全二叉树结构
        子节点的键值对小于（或者大于）它的父节点


#堆排序
def heap_sort(list):
    def sift_down(start,end):
        '''最大堆调整'''
        root = start
        print("root %d start %d end %d"%(root,start,end))
        while True:
            child = 2* root +1
            print("child index: %d"%child)
            #终止条件，孩子的索引值超过数组的最大长度
            if child > end:
                break
            print("lst child value:%d"%list[child])
            #确定最大的孩子节点的索引值
            if child +1 <= end and list[child] <list[child +1]:
                child += 1
                print("child+1 index: %d"%child)
            #孩子节点最大值和根节点交换
            if list[root] < list[child]:
                list[root],list[child] = list[child],list[root]
                print("list root %d "%list[root],"listchild %d"%list[child])
                root = child
                #print("root %d%root)
            else:
                break
    print("---------------创建最大堆----------------------------")
    #创建最大堆
    print(range((len(list) -2)//2,-1,-1))
    for start in range((len(list) -2)//2,-1,-1):
        print("--------loop start %d"%start)
        sift_down(start,len(list) -1)
        print(list)

    print('----------排序过程-------')
    #堆排序
    for end in range(len(list)-1,0,-1):
        #首位交换
        list[0],list[end] = list[end],list[0]
        #剩余重新排序
        sift_down(0,end-1)
        print(list)
alist = [70,60,12,40,30,8,10]
print((heap_sort(alist)))


        
           


二分查找：
        折半查找
        必须采用顺序存储结构
        必须按关键字大小有序排列
        【乱序 不能二分查找】
                




alist = [0,1,10,88,19,9,1]

def binary_search(arr,start,end,hkey):
    if start > end:
        return -1
    mid = start + (end - start)/2
    if arr[mid] >hkey:
        return binary_search(arr,start,mid-1,hkey)
    if arr[mid] < hkey:
        return binary_search(arr,mid+1 ,end,hkey)
    return mid
alist = sorted(alist)
print(alist)
print(binary_search(alist,0,6,9))


素数：
        

def is_prime(n):
    if n <=1:
        return False
    for i in range(2,n-1):
        if n % i == 0:
            return False
    return True
for i in range(0,100):
    if is_prime(i):
        print(i)
        

-------------------------
六  【linux】

        
 cd切换目录
ls -l 列出文件详细信息；ls -a 列出当前目录下所有文件
touch 创建文件
mkdir创建目录
echo 创建带有内容的文件
cat查看文件内容
grep 在文本文件中查找某个字符串
tree 显示目录结构
ln 创建软链
mv移动或重命名
wc 统计文本中的行数，字数，字符数
more ，less分页显示文本内容
head，tail显示文件头尾内容

---------------------------------------------
网络命令
curl利用url规则在命令行下工作的文件传输工具
netstat 显示网络状态信息
telnet登录远程手机（不安全，SSH替代
---------------------------------------------
系统命令
ping 测试网络
man 查看帮助
kill 杀死进程
top 动态显示当前耗费资源最多进程信息
ps 显示瞬间进程状态
df 查看磁盘大小    df -h带有单位显示磁盘信息


七 【计算机网络】
Open System Interconnection
OSI七层模型指的是哪些内容:
        【网络接口层】                
        物理层：建立，维护，断开物理连接
        数据链路层：逻辑连接，硬件地址连接，差错校验
        -----------------------------------------------------------------
        【IP层】
        网络层：逻辑地址寻址，不同网络之间的路径选择，IP
        -------------------------------------------------------------------
        【传输层】
        传输层：传输数据协议，TCP,UDP
        -------------------------------------------------------------------
        【应用层】
        会话层，建立、管理、终止会话，本地与远程主机的会话
        表示层：数据的标示，安全，压缩，JPEG,ASCII等
        应用层：与最终用户的接口，HTTP,HTTPS,SMTP等
        
        



http协议中get和post的区别：
                        功能差异
                        数据传输
                        安全性
                        
                        
                        

tcp和udp的区别：
                    TCP                      UDP
      是否连接       面向连接                 面向非连接
      传输可靠性     可靠的                   不可靠的
      应用场合       传输量大的数据            少量数据
      速度           慢                       快


tcp连接三次握手具体过程：
客户端             -------------------------               服务器

                        


socket建立连接的过程：
                服务器建立监听：socket，bind，listen
                客户端发送请求，connect，send
                连接确认，accept，response
                
                        


进程，线程区别：
                进程：独立数据空间，进程间不共享数据，系统调度
                线程：执行程序的最小单元，进程内线程间共享资源，系统调度
                一个进程可以有多个线程，多个线程也可以并发执行
       
        



进程都有哪些状态：
                就绪状态 ：已获除处理机以外所需资源，等待分配处理机资源
                运行状态：占用处理机资源运行，此状态进程数 <= CPU数
                阻塞状态：进程等待某种条件，在条件满足之前无法执行
                
                




进程同步与互斥的区别：
                互斥：
                某一资源同时只允许一个访问者对其进行访问
                具有唯一性和排他性
                互斥无法限制访问者对资源的访问顺序，即访问是无序的
                
                同步：
                基于互斥，经其它机制实现访问者对资源的有序访问
                大多数情况下，同步已经实现了互斥，写入资源是互斥的
                少数情况下，可以允许多个访问者同时访问资源


进程中的通信都包括哪些：
                        管道：半双工通信方式，数据单项流动，父子进程间
                        命名管道：半双工通信方式，无亲缘关系进程间通信
                        信号量：是计数器，锁机制，控制多进程对资源访问
                        消息队列：消息链接，存放在内核中由消息队列标识符标识
                        信号：比较复杂的通信方式，通知进程某个事件已经发生
                        共享内存：映射一段能被多个进程可访问的内存
                        




进程中的调度算法都有哪些：
                        先来先服务（FCFS,First Come First Service）
                        短作业优先（SJF,Shortest Process Next）
                        时间片轮转调度算法（RR,Round Robin）
                        高响应优先（HRRN,Highest Response Ratio Next）
                        优先权调度算法 
                        多级队列调度算法
                        
                        
                        
                        

死锁产生的原因：
                资源竞争
                进程推进顺序不当
                必要条件：互斥，不剥夺，请求与保持，环路等待
                预防死锁：破坏四个必要条件之一


页面的置换算法都有哪些:
                     最佳置换算法
                     先进先出置换算法
                     最近最久未使用置换算法
                     clock置换算法，也叫最近未使用算法
                     
                     

makefile的作用是什么

什么是虚拟、实存、共享内存：
                        虚存（VIRT=SWAP+RES)  进程“需要的”虚拟内存的大小
                        包括进程使用的库，代码，数据，以及malloc、new分配的堆空间和分配的栈空间等
                        申请10MB，使用1MB,增长10MB
                        
                        实存 （RES= CODE+DATA)
                        包括使用中的malloc、new分配的堆空间和分配的栈空间，但不包括swap out量
                        申请10MB，使用1MB,增长1MB
                        
                        共享内存（SHR）：自身，也包括其他进程的共享内存
                        进程只使用了几个共享库的函数，但包括整个共享库大小
                        某个进程所占用的物理内存大小：RES - SHR
                        
                        
                        
如何创建一个数据库

如何创建一个数据库表

如何操作数据表中的数据:
                insert into 表名 values （内容）
                



---------------------------------------------------------------------------------------------------



如何配置fake response 、fake request？
                        
                                
                                
                                




数据包request、response中的字段含义





fiddler实现慢网速：
        fiddlerscript ---   go to：（before request）第一个选项 改： 
        if (m_SimulateModem) {
            // Delay sends by 300ms per KB uploaded.
            oSession["request-trickle-delay"] = "3000"; 
            // Delay receives by 150ms per KB downloaded.
            oSession["response-trickle-delay"] = "1500"; 
        }
        
save script

rules ---  performance ---  选中 simulat moden speeds

-------------------------------------------------------------------------------


模拟不同的状态码：
                
autoresponder：



Android系统相关问题：

        安卓的四大组件
        
        
        activity的生命周期是什么
        
        什么是ANR
        
        Android常见的五种布局是什么
        
        android中的动画有哪几种类型
        
        
 1125更新
 
 
 Android的四大组件：
                Activity：程序与用户的交互窗口
                Service：在程序后台，完成用户的操作
                Contentprovider：提供数据的统一访问格式
                broadcast receiver：应用程序之间的传输信息机制

Activity的生命周期是什么：
        Acitived：
        Stoped：
        Paused：
        Killed：

什么是ANR：
        Application not responding
        Activity的最长执行时间是5秒
        用户可以选择“等待”让程序继续运行，或“强制关闭”

Android常见的五种布局是什么：
        Framelayout（框架布局）
        linear layout（线性布局）
        absolute layout（绝对布局）
        relative layout（相对布局）
        table layout（表格布局）

Android中的动画有哪几种类型：
        Tween动画，组件移动，缩放，透明度的变化
        Frame动画，通过顺序播放来实现，类似电影

如何重启adb服务：
        Adb kill-server
        Adb start-server

App的安装与卸载:
        Adb -s <devicename> install <path-to-apk>
        Adb -s <devicename> install -r <path-to-apk>  覆盖安装
        Adb -s <devicename> uninstall <packagename>


如何在电脑和手机之间传输数据：
        adb push D:\test.apk /data/local/mp/test.apk
        Adb pull /data/local/tmp/test.txt D:\



如何静默安装app:
        Adb push D:\test.apk /data/temp/test.apk
        Adb shell pm install -f  /data/temp/test.apk



如何使用adb启停一个app:
        Adb shell am start -W -S package/activity
        Adb shell am force-stop package     只需跟包名不用写路径



如何通过某个关键词查找已安装的包:
        Adb shell pm list package -f keyword
        Adb shell pm list package -3 keyword    -3：第三方安装的app 不是手机自带的
        Adb shell pm list package -i keyword     已经安装的




如何截屏 录屏：
        Adb shell scrncap /data/local/tmp/screen.png
        Adb shell screenrecod /data/locat/tmp/demo.mp4

如何抓取log cat日志:
        Adb logcat
        Adb shell logcat
        如何获取当前的cpu 、内存状态:
        Adb shell dumpsys meminfo package
        Adb shell dumpsys cpuinfo | findstr package

monkey相关的问题

        Monkey进行压力测试的命令？
        Adb shell monkey -p <packagename>  <count>    count:执行个数
        Adb shell monkey -p com.android.calculator2 100


如何重现crash、ANR过程:
        添加参数 -s seed
        Adb shell monkey -s 6789 -p com.android.calculator2 100



如何提取crash 、ANR的信息:
        将monkey执行过程中的日志重定向到文件
        测试版app连接第三方统计平台

如何设置monkey运行8个小时：
        添加参数 --throttle
        Adb shell monkey -v -v -v -s 6789 --throttle 300 -p com.android.calculator2 100【monkey变慢执行，设置等待时间 】


在crash/ANR后，如何继续执行？
        添加忽略Crash参数     --ignore-crashes
        添加忽略ANR参数      --ignore-timeouts

        Adb shell monkey -v -v -v -s 6789 --throttle 300 --ignore-crashes --ignore-timeouts -p com.android.calculator2 100


如何让monkey执行指定的事件？
        触摸事件 --pct-touch
        动作事件  --pct-motion
        轨迹球事件 --pct-trackball
        基本导航事件  --pct-nav
        主要导航事件 --pct-majornav
        系统导航事件 --pct-syskeys
        应用启动事件  --pct-appswitch
        其他类型事件 --pct-anyevent

        Adb shell monkey -v -v -v -s 6789 --throttle 300 --ignore-crashes --ignore-timeouts --pct-touch 50 --pct-motion 50 -p com.android.calculator2 100


【自动化工具】

Instrumentation：
        * 原理：
        * 测试什么：功能性测试
                      Activity生命周期的测试
                      模拟数据库操作的测试和兼容性测试

        * 什么情况使：使用Java jUnit 框架
                      需要进行白盒测试时
                      需要使用Mock技术模拟系统对象时
                      【需要做白盒测试时使用】
UIAutomator UIAutomatorViewer：
        Uiautomator 原理：安卓UI自动化测试工具
                      不需要源码，基于Java语言开发
                      类库：UiDevice  ，UiSelector ，UiScrollable  ，UiObject ，UiCollection

Uiautomator可以测试什么：
        App ui层的交互操作
        不需要源码，可以模拟跨进程操作（如：从app转发内容到第三方平台如qq，微信，微博等）
        基于Java junit框架，黑盒UI自动化（不用关心代码逻辑）

如何识别app视图内的元素：
        UiautomatorViewer  安卓sdk tools文件夹下
        可以识别元素的id，classname，bond...


Selendroid、Robotium：
        Selendroid原理：基于Instrumentation做的封装
四大组件：
        Selendroid client:Webdriver +移动特性的实现
        Selendroid server：一个instrumentation APK
        Androiddriver-app：一个WebViewActivity，即浏览器
        Selendroid-standalone：大总管，负责准备环境

Robotium原理：
        基于Instrumentation进行封装，实现的Android测试框架
        封装了一个solo类库，提供自动化测试API
        由于是基于Instrumentation，测试时需要源码


Appium：
        什么是appium：
        一个开源的移动端UI自动化测试框架


Appium理念：
        不需要app源码
        不局限于语言或者框架
        接口统一，不需要重复开发
        必须是开源的




Appium相关的概念：
        CS架构，appium核心是一个web服务器
        Session，客户端初始化session与服务端交互
        Desired capabilites，处死话时键值对组合

Appium环境都包括哪些内容：
        Appium server，操作与驱动手机
        Appium client，支持多语言调用


Appium都支持哪些开发语言：
        Android SDK，JDK , Appium
        Pycharm，python环境
        库：selenium，appium-python-client【需要版本匹配，可能出现api不兼容的情况】
        Java，Javascript，PHP，python，Ruby，c#，perl，Object C


appium初始化时都需要配置哪些内容：
        PaltformName，目标设备平台android/ios
        PlatformVersion，目标设备的平台版本
        deviceName，目标设备名称
        AppPackage，app包名（Android）
        AppActivity，app activity名称（android）
        automationName，自动化驱动类型 Selendroid/appium
        unicodeKeyboard，是否使用appium输入法
        resetkeyboard，是否恢复默认键盘
        
        




Appium测试native app的原理：

                       
                                               
                 ---         ---- Android
           Python --- appium ------------手机
             
Appium测试hybrid app的原理：
                测试混合型app，区别：页面的元素java + html   共同实现  如：手机浏览器；app里面加载了H5页面    // 都是Java语言
                
                
                <--------                < ----------
python --        appium              selendroid                      手机
                -------->                 ---------->
                
                
                
Appium测试 ios app的原理是什么：
                   json
                   wire
                   protocol
                 ---------                    ----------                  -----------
        
test script                   appium server                   WDA                                           wda app      
                 ---------                    ----------                  -----------

                                                           facebook
                                                           WebDriverAgent
            



如何自动化测试Native app：
        元素定位，识别：
                第一个选择，使用UIAutomatorViewer
                第二个选择，使用Appium的Inspector
                
        定位元素的API都有哪些：
                find_element_by_accessibility_id
                find_element_by_id
                find_element_by_name
                find_element_by_class_name
                find_element_by_xpath
                
        脚本的编写规则：
                LOVE规则：
                L:Locate定位
                O:Operate操作
                V:Verify验证
                E:Exception异常处理
                
        初始化注意事项：
                不需要指定app包路径
                默认使用appium驱动
                如果需要输入中文，需要添加输入法相关配置
          
        
           
        
如何自动化测试hybird app：
        元素定位，识别工具：
                Native部分：，UIAutomator或者appium inspector
                WebView部分，chrome浏览器的调试模式
                
        定位元素的API都有哪些：
                find_element_by_accessibility_id
                find_element_by_id  【和native里面的id有区别。
                find_element_by_name
                find_element_by_classname
                find_element_by_xpath  【h5页面里面的..........
                find_element_by_link_text
                find_element_by_tag_name     【div    table  body.....
                
                
                
        脚本编写规则：
                S -LOVE规则：
                S:Switch 
                L:Locate定位
                O:Operate操作
                V:Verify验证
                E:Exception异常处理        
        
        初始化时注意事项：
                需要明确指定驱动名称为：selendroid
                需要明确指定app的路径，因为需要签名
                
                
        
        
如何使用selenium测试web页面：
        工具：pycharm，chrome
        包：selenium，python
        webdriver：chrome driver/firefox driver/ie driver等
        元素识别工具：firefox或者chrome的调试工具
        元素定位：
                find_element_by_link_text
                find_element_by_id
                find_element_by_name
                find_element_by_class_name
                find_element_by_xpath
                find_element_by_tag_name
        
        
        
        
        
如何使用selenium测试WEB页面：
如何使用appium测试WAP页面：
        环境准备：
                IDE:Pycharm
                包：python，selenium，appium-python-client
                工具：appium，chrome
        元素识别：
                chrome浏览器调试wap页面
        脚本的编写：
                初始化时，指定browsername为：Browser
                自动化测试代码和selenium相同
                
    
    
    from appium import webdriver
    import time
    #定义初始化的属性信息
    desired_caps = {}
    desired_caps['platformName'] = 'Android'
    desired_caps['platformVersion'] = '5.1'
    desired_caps['deviceName'] = '192.168.56.102:5555'
    desired_caps['browserName'] = 'Browser
    desired_caps['unicodeKeyboard'] = 'True'
    desired_caps['resetKeyboard'] = 'True'
    driver = webdriver.Remote('http://localhost:4723/wd/hub',desired_caps)
    
    #打开首页
    driver.get("http://www.imooc.com")
    time.sleep(3)
    
    #验证实战标签显示了
    e = driver.find_element_by_xpath('//*[@id="pages-container"]/section[2]/u1/li[1]/a/span')
    #断言显示了
    ；
    
    
    
    
    
    



                      
                        


































































python常问算法

linux

计算机网络

操作系统

数据库

fiddler功能

安卓系统相关

adb相关

monkey相关





