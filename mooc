坑：https://blog.csdn.net/qq_38386316/article/details/79349536

2、关于mock;
        https://blog.csdn.net/peiyao456/article/details/77075173




3、思考点：

接口地址                    请求数据

接口类型                    预期结果

headers                    数据依赖***




4、python操作excel：
                https://blog.csdn.net/majordong100/article/details/50708365
                
                
                
https://www.cnblogs.com/blackclody/p/6885630.html







https://www.cnblogs.com/wjx1/p/5084980.html


class FooChild(FooParent):                                                               
    def __init__(self):
        FooParent.__init__(self)
        print 'Child'
        
    def bar(self,message):
        FooParent.bar(self,message)
        print 'Child bar function.'
        print self.parent                                                  
        
        
        
class FooChild(FooParent):
    def __init__(self):
        super(FooChild,self).__init__()
        print 'Child'
        
    def bar(self,message):
        super(FooChild, self).bar(message)
        print 'Child bar fuction'
        print self.parent
        
        
  https://www.cnblogs.com/blackclody/p/6885736.html
  
  https://www.cnblogs.com/bahcelor/p/6872243.html
  
  
  
  
 
  
  
python中 __str__和__repr__     :


如果要把一个类的实例变成 str，就需要实现特殊方法__str__()：

class Person(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender
    def __str__(self):
        return '(Person: %s, %s)' % (self.name, self.gender)
现在，在交互式命令行下用 print 试试：

>>> p = Person('Bob', 'male')
>>> print p
(Person: Bob, male)
但是，如果直接敲变量 p：

>>> p
<main.Person object at 0x10c941890>
似乎__str__() 不会被调用。

因为 Python 定义了__str__()和__repr__()两种方法，__str__()用于显示给用户，而__repr__()用于显示给开发人员。

有一个偷懒的定义__repr__的方法：

class Person(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender
    def __str__(self):
        return '(Person: %s, %s)' % (self.name, self.gender)
    __repr__ = __str__
    
    
    
    
    
    
    
    
    
    
    
    
【斐波拉契数列】
**一：

class Fib(object):
    def __init__(self,num):
        a,b,l = 0,1,[]
        for n in range(num):
            l.append(a)
            a,b = b,a+b
        self.numbers = l
    def __str__(self):
        return str(self.numbers)
    __repr__=__str__
    def __len__(self):
        return len(self.numbers)
f = Fib(12)
print(f)
print(len(f))



**二：

class Fib(object):
    def __call__(self,num):
        a,b,l = 0,1,[]
        for n in range(num):
            l.append(a)
            a,b = b,a+b
        return l

f = Fib()
print f(10)










慕课视频 7-12
处理返回值中的乱码的问题  坑：


https://blog.csdn.net/chuatony/article/details/72628868



s = '漢  χαν  хан'
print('unicode: ' + s.encode('unicode-escape').decode('utf-8'))
 
u = s.encode('unicode-escape').decode('utf-8')
print('解回字符串: ' + u.encode("utf-8").decode('unicode-escape'))
 
#u = r'\u6f22  \u03c7\u03b1\u03bd  \u0445\u0430\u043d'
#print('解回字符串: ' + u.encode("utf-8").decode('unicode-escape'))



class CommonUtil:
    def is_contain(self,str_one,str_two):
        flag = None
        if isinstance(str_one,str ):
            str_one = str_one.encode('unicode-escape').decode('utf-8')   #7-12 关于处理乱码的问题
        if str_one in str_two:
            flag = True
        else:
            flag = False
        return flag

*******************excel表里面没有写预期结果导致花费大量时间






case1.xls

case依赖：此接口依赖上一个【__】接口
依赖的返回数据：上一个接口返回的value            data:name            data:[1]:name

数据依赖字段：此接口的key











network   ---  XHR  查看接口



【mysql-python】
https://blog.csdn.net/qq_33850908/article/details/79091241
https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python






import MySQLdb
conn = MySQLdb.connect(
            host='xxx.xxx.xxx.xxx',
            port=3306,
            user='xxx',
            password='xxxx',
            db='message',
            charset='utf8'
        )

cur = conn.cursor()              #通过获取到的数据库连接conn下的cursor()方法来创建游标。
cur.execute("SELECT * FROM t_message_log WHERE id = '13'")
print(cur.fetchone())


*******注意db应该填表名而不是数据库名





**************************************************************************
5-2    unittest和requests重构封装
        关于  self   全局变量 的
        python知识    
        待解决




5-3   unittest中assert的使用
坑：
运行用例时，报错string indices must be integers

解决办法：
        res = self.run.run_main(url,'POST',data)
        print(res)
        res = json.loads(res)      #【将字符串转成dict格式 】 或：
        res=json.loads(res)        #【将字符串转成json格式】


https://blog.csdn.net/u010534192/article/details/75443304






unittest  减少依赖执行
执行顺序按照字母排序













fp = open(filepath,'wb')




【【python开发测试框架】】
1、requests
2、unittest
3、htmltestrunner
4、数据存储  数据库/excel  /
5、Jenkins



【【如何管理case】】
case的  skip     #unittest.skip('test_02')
excel



【【简述case的执行】】
case的先后执行
有依赖的情况



【【如何解决case依赖】】
定义全局变量
存储在配置文件  or数据库










6-3
关于转码
decode  
incode
dumps
。。。




【【python中json文件处理涉及的四个函数json.dumps()和json.loads()、json.dump()和json.load()的区分】】

1、json.dumps()和json.loads()是json格式处理函数（可以这么理解，json是字符串）
　　(1)json.dumps()函数是将一个Python数据类型列表进行json格式的编码（可以这么理解，json.dumps()函数是将字典转化为字符串）
　　(2)json.loads()函数是将json格式数据转换为字典（可以这么理解，json.loads()函数是将字符串转化为字典）

2、json.dump()和json.load()主要用来读写json文件函数








返回数据转化成json格式【详见runmethod.py】
return json.dumps(res,ensure_ascii=False,sort_keys=True,indent=2)





https://www.cnblogs.com/hanxiaobei/p/6613968.html
获取header部分的值 
request.header
import json

url = "http://192.168.1.48/wordoor_uaas_api/v1/sessions/create"
para = {"acc":"mgtestmmm@qq.com","pwd":"123456"}
header ={}

r = requests.post(url,data=para,headers= header)

# print('get请求获取的响应结果json类型',r.text)
print("token",r.headers)








【python发送http请求之requests模块：】
【https://blog.csdn.net/onlyanyz/article/details/45368841】



【requests中文文档】
http://cn.python-requests.org/zh_CN/latest/?utm_source=qq&utm_medium=social&utm_oi=58424368824320





case依赖
【jsonpath_rw】
https://www.cnblogs.com/shapeL/archive/2018/05/29/9106437.html



fiddler返回的值 和 数据库查询出来的值格式不一致：
遍历循环    比对值是否一致




Python3中已经不能使用cmp()函数了，被如下五个函数替代:

import operator       #首先要导入运算符模块
operator.gt(1,2)      #意思是greater than（大于）
operator.ge(1,2)      #意思是greater and equal（大于等于）
operator.eq(1,2)      #意思是equal（等于）
operator.le(1,2)      #意思是less and equal（小于等于）
operator.lt(1,2)      #意思是less than（小于）




【python装饰器】
https://blog.csdn.net/xiangxianghehe/article/details/77170585


https://www.cnblogs.com/cicaday/p/python-decorator.html
