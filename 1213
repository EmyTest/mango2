单接口测试
      1. json格式测试：  
  通常我们的接口一般设计的都是传递json串，那么就需要去测试
  如果传递非json的情况，这时候程序会不会正确的处理，返回相应的        error code

2. 默认值测试：
  很多情况一些非必填的参数会有默认值，比如说一个查询的接口，参数count为返回查询的结果数量，
  默认为10，那么就应该有一条case来测试，当然前置条件是数据库里面必须要存在这样的数据超过10条。

3. 异常类型测试：
  比如上面的count参数，这个参数的类型一定是可以转换为int类型的，这时候我们需要测试如果传的一些不可以
  转换为int类型值来测试代码是否加入判断

4. 必传项测试：
  如果接口的参数有必传项，那么需要测试在不传这个参数的时候接口返回情况，测试是否会提示
  相应的error code

5. 非必传项测试：
  如果接口有非必填项，当我不传递这些参数的时候会不会正常的返回相应的结果

6.非空测试：
  无论是必传的和非必传的参数，传递的key是正确的，但是value=null，这时候返回结果是否正确

7.业务逻辑测试：
  传递正确的参数，接口对数据库进行查询的操作，需要去验证数据库查询是否正确，接口对数据库进行
  增删改的操作，也需要看数据库是否同步进行了这些操作

8.兼容性测试：
  比如说今天接口进行了调整，但是前端没有进行变更，这时候需要验证新的接口是否满足旧的调用方式

9.错误码测试：
  通用的错误码与业务错误码是否能够清晰的说明调用问题，错误码是否能够尽可能的全的覆盖所有的情况

10.数据异常测试：
  假如数据库设计为32位varchar类型，那么如果传33位会是什么情况，会不会抛出相应的错误码，而不会抛出数据库异常

11.返回值测试：
  返回值除了内容需要是正确的，还需要类型也是正确的，保证调用方拿到这些参数能够正确的解析

12.加密测试：

------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------



4.1    接口可用性
接口可用性主要测试接口是否可用、接口是否存在、接口的协议类型，测试案例中应包括：
〖R1〗    依据接口文档中给定的接口地址和协议方法能够访问到该接口。
〖R2〗    使用错误的协议方法无法按照接口地址进行访问。
〖R3〗    使用正确的协议方法无法按照错误的接口地址进行访问。

4.2    输入输出参数个数及命名
输入输出参数个数及命名主要测试接口包含的输入输出参数的个数以及各个参数的命名是否正确，测试案例中应包括：
〖R1〗    依据接口文档检查输入参数的个数以及命名是否和文档一致。
〖R2〗    依据接口文档检查输出参数的个数以及命名是否和文档一致（注意检查输出的正常参数和异常参数）。
〖R3〗    输入错误的参数名，接口会报错，并有错误信息返回。

4.3    输入参数的必输项
输入参数的必输项主要测试接口对输入参数的可选与必输的要求，测试案例中应包括：
〖R1〗    按照接口文档对所有必输的输入项依次不输入，检查接口是否给予报错信息返回。
〖R2〗    按照接口文档对所有选输的输入项依次检查是否可以不输入参数接口也有正确数据返回，无报错信息。

4.4    输入参数的合法性
输入参数的合法性的合法性主要对参数的录入规范要求进行检查，测试案例中应包括：
〖R1〗    依据接口文档，有明确的要求的（如：只能由数字组成、在以下几个可选值中选择、只能由字母组成、长度最多为多少、格式为时间格式）输入参数，检查是否符合这些要求。
〖R2〗    依据接口文档，没有明确要求的输入参数，依次测试长度超长、含有特殊字符、全角半角等情况。检查接口是否报错，给予错误返回信息。

4.5    输出参数内容的正确性
输出参数内容的正确性主要对输出参数的内容是否和后台真实数据一致进行检查，测试案例中应包括：
〖R1〗    考虑多种输入参数的组合情况，依次测试在这些组合情况下接口返回的数据的各字段内容是否正确，要具体检查每个字段的内容。一般通过与后台数据库数据比较来进行检查。
〖R2〗    考虑多种输入参数的组合情况，依次测试在这些组合情况下接口返回的数据中涉及输入参数的项，是否和最初输入的值一致。

4.6    接口实现功能验证
接口实现功能验证主要对接口操作的具体功能是否正常运转进行检查，测试案例中应包括：
〖R1〗    输入正确的参数，检查接口对应的要实现的后台功能是否正确运转。例如：对一个启动接口发送启动的命令，接口对应的后台系统能够正确启动并返回正确的参数。
〖R2〗    输入错误的参数，检查接口对应的要实现的后台功能是否没有运转。
4.7    接口文档规范性
接口文档规范性主要对开发提供的接口文档是否规范准确进行检查，测试案例中应包括：
〖R1〗    接口文档中对于输入输出参数都有准确的命名，不存在模糊的情况。
〖R2〗    接口文档对于每一个参数都有明确的类型说明，是否可选还是必输，是否有默认值。
〖R3〗    接口文档对于每一个输入参数都要明确好基本的录入条件，比如长度最长多少、只能为数字还是字母、不能含有特殊字符等。
〖R4〗    针对一个接口如果有多种类型的输出参数组合且参数的命名或个数有不同，这种情况，要在接口文档中罗列清晰，并明确指出出现这种类型的输出参数的条件。
--------------------- 
作者：金刚龙123 
来源：CSDN 
原文：https://blog.csdn.net/jinganglong123/article/details/51122787 
版权声明：本文为博主原创文章，转载请附上博文链接！














string = input('请输入表达式：')

if len(string.split('+'))==2 :
    temp = string.split('+')
    print (float(temp[0]) + float(temp[1]))

if len(string.split('-'))==2 :
    temp = string.split('-')
    print (float(temp[0]) - float(temp[1]))

if len(string.split('*'))==2 :
    temp = string.split('*')
    print (float(temp[0]) * float(temp[1]))

if len(string.split('/'))==2 :
    temp = string.split('/')
    print (float(temp[0]) / float(temp[1]))

if len(string.split('%'))==2 :
    temp = string.split('%')
    print (float(temp[0]) % float(temp[1]))

if len(string.split('**'))==2 :
    temp = string.split('**')
    print (float(temp[0]) ** float(temp[1]))
